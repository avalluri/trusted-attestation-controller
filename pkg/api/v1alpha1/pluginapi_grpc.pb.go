//
//Copyright 2022.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: pkg/api/v1alpha1/pluginapi.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Registry_RegisterPlugin_FullMethodName = "/v1alpha1.Registry/RegisterPlugin"
)

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryClient interface {
	RegisterPlugin(ctx context.Context, in *RegisterPluginRequest, opts ...grpc.CallOption) (*RegisterKeyServerReply, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) RegisterPlugin(ctx context.Context, in *RegisterPluginRequest, opts ...grpc.CallOption) (*RegisterKeyServerReply, error) {
	out := new(RegisterKeyServerReply)
	err := c.cc.Invoke(ctx, Registry_RegisterPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
// All implementations must embed UnimplementedRegistryServer
// for forward compatibility
type RegistryServer interface {
	RegisterPlugin(context.Context, *RegisterPluginRequest) (*RegisterKeyServerReply, error)
	mustEmbedUnimplementedRegistryServer()
}

// UnimplementedRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (UnimplementedRegistryServer) RegisterPlugin(context.Context, *RegisterPluginRequest) (*RegisterKeyServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlugin not implemented")
}
func (UnimplementedRegistryServer) mustEmbedUnimplementedRegistryServer() {}

// UnsafeRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServer will
// result in compilation errors.
type UnsafeRegistryServer interface {
	mustEmbedUnimplementedRegistryServer()
}

func RegisterRegistryServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	s.RegisterService(&Registry_ServiceDesc, srv)
}

func _Registry_RegisterPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).RegisterPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_RegisterPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).RegisterPlugin(ctx, req.(*RegisterPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Registry_ServiceDesc is the grpc.ServiceDesc for Registry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPlugin",
			Handler:    _Registry_RegisterPlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/v1alpha1/pluginapi.proto",
}

const (
	Plugin_ValidateQuote_FullMethodName          = "/v1alpha1.Plugin/ValidateQuote"
	Plugin_GetCAKeyAndCertificate_FullMethodName = "/v1alpha1.Plugin/GetCAKeyAndCertificate"
)

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginClient interface {
	// ValidateQuote validates the given SGX quote
	ValidateQuote(ctx context.Context, in *ValidateQuoteRequest, opts ...grpc.CallOption) (*ValidateQuoteReply, error)
	// GetCAKeyCertificate retrieves the stored CA key and certificate at the key-manager
	// for given signer signerName.
	// On success, returns the key and certificate.
	// Otherwise, appropriate error gets returned.
	GetCAKeyAndCertificate(ctx context.Context, in *GetCAKeyAndCertificateRequest, opts ...grpc.CallOption) (*GetCAKeyAndCertificateReply, error)
}

type pluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginClient(cc grpc.ClientConnInterface) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) ValidateQuote(ctx context.Context, in *ValidateQuoteRequest, opts ...grpc.CallOption) (*ValidateQuoteReply, error) {
	out := new(ValidateQuoteReply)
	err := c.cc.Invoke(ctx, Plugin_ValidateQuote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) GetCAKeyAndCertificate(ctx context.Context, in *GetCAKeyAndCertificateRequest, opts ...grpc.CallOption) (*GetCAKeyAndCertificateReply, error) {
	out := new(GetCAKeyAndCertificateReply)
	err := c.cc.Invoke(ctx, Plugin_GetCAKeyAndCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
// All implementations must embed UnimplementedPluginServer
// for forward compatibility
type PluginServer interface {
	// ValidateQuote validates the given SGX quote
	ValidateQuote(context.Context, *ValidateQuoteRequest) (*ValidateQuoteReply, error)
	// GetCAKeyCertificate retrieves the stored CA key and certificate at the key-manager
	// for given signer signerName.
	// On success, returns the key and certificate.
	// Otherwise, appropriate error gets returned.
	GetCAKeyAndCertificate(context.Context, *GetCAKeyAndCertificateRequest) (*GetCAKeyAndCertificateReply, error)
	mustEmbedUnimplementedPluginServer()
}

// UnimplementedPluginServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (UnimplementedPluginServer) ValidateQuote(context.Context, *ValidateQuoteRequest) (*ValidateQuoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateQuote not implemented")
}
func (UnimplementedPluginServer) GetCAKeyAndCertificate(context.Context, *GetCAKeyAndCertificateRequest) (*GetCAKeyAndCertificateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCAKeyAndCertificate not implemented")
}
func (UnimplementedPluginServer) mustEmbedUnimplementedPluginServer() {}

// UnsafePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServer will
// result in compilation errors.
type UnsafePluginServer interface {
	mustEmbedUnimplementedPluginServer()
}

func RegisterPluginServer(s grpc.ServiceRegistrar, srv PluginServer) {
	s.RegisterService(&Plugin_ServiceDesc, srv)
}

func _Plugin_ValidateQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ValidateQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plugin_ValidateQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ValidateQuote(ctx, req.(*ValidateQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_GetCAKeyAndCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCAKeyAndCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).GetCAKeyAndCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plugin_GetCAKeyAndCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).GetCAKeyAndCertificate(ctx, req.(*GetCAKeyAndCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Plugin_ServiceDesc is the grpc.ServiceDesc for Plugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateQuote",
			Handler:    _Plugin_ValidateQuote_Handler,
		},
		{
			MethodName: "GetCAKeyAndCertificate",
			Handler:    _Plugin_GetCAKeyAndCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/v1alpha1/pluginapi.proto",
}
